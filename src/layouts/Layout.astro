---
import "../styles/global.css";
---

<!doctype html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Kenshiata Studio</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/solid.min.css"
      integrity="sha512-DzC7h7+bDlpXPDQsX/0fShhf1dLxXlHuhPBkBo/5wJWRoTU6YL7moeiNoej6q3wh5ti78C57Tu1JwTNlcgHSjg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/fontawesome.min.css"
      integrity="sha512-v8QQ0YQ3H4K6Ic3PJkym91KoeNT5S3PnDKvqnwqFD1oiqIl653crGZplPdU5KKtHjO0QKcQ2aUlQZYjHczkmGw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script>
      import {
        getWebInstrumentations,
        initializeFaro,
      } from "@grafana/faro-web-sdk";
      import { TracingInstrumentation } from "@grafana/faro-web-tracing";

      initializeFaro({
        url: "https://faro-collector-prod-eu-central-0.grafana.net/collect/7af1bfb2d156ac36e8103b9162ec38aa",
        app: {
          name: "Kenshiata front web",
          version: "1.0.0",
          environment: import.meta.env.PUBLIC_ENV ?? "unknown",
        },

        instrumentations: [
          // Mandatory, omits default instrumentations otherwise.
          ...getWebInstrumentations(),

          // Tracing package to get end-to-end visibility for HTTP requests.
          new TracingInstrumentation({
            instrumentationOptions: {
              propagateTraceHeaderCorsUrls: [
                /^http(s)?:\/\/localhost:\d+\/.*/i,
                /^ws(s)?:\/\/localhost:\d+\/.*/i,
                /^https:\/\/kenshiata\.(com|studio)\/.*/i,
                /^https:\/\/.*\.kenshiata\.(com|studio)\/.*/i,
                /^wss:\/\/ws\.kenshiata\.(com|studio)\/.*/i,
              ],
              fetchInstrumentationOptions: {
                applyCustomAttributesOnSpan: (span, request) => {
                  try {
                    if (span?.attributes?.["http.url"] === undefined) return;
                    const method = span?.attributes?.["http.method"] || "HTTP";
                    const url = new URL(span?.attributes?.["http.url"]);
                    span.updateName(`${method} ${url.pathname}`);
                  } catch (err) {
                    console.error(err);
                  }
                },
              },
              xhrInstrumentationOptions: {
                applyCustomAttributesOnSpan: (span, xhr) => {
                  try {
                    if (span?.attributes?.["http.url"] === undefined) return;
                    const method = span?.attributes?.["http.method"] || "HTTP";
                    const url = new URL(span?.attributes?.["http.url"]);
                    span.updateName(`${method} ${url.pathname}`);
                  } catch (err) {
                    console.error(err);
                  }
                },
              },
            },
          }),
        ],
      });
    </script>
  </head>
  <body>
    <slot />
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
